name: Build and Release

on:
  push:
    tags:
      - '*'  # 在任何标签推送时触发
jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [amd64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Get version from Git
        id: get_version
        run: |
          VERSION=$(git describe --tags --always)
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # 将版本号写入 GITHUB_ENV

      - name: Build Linux executable
        run: |
          pyinstaller --onefile --name main-linux-${{ matrix.architecture }} main.py
        env:
          VERSION: ${{ env.VERSION }}

      - name: Upload Linux build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-${{ matrix.architecture }}
          path: dist/

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [amd64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Get version from Git
        id: get_version
        run: |
          $VERSION = git describe --tags --always
          Write-Host "VERSION=$VERSION"
          $env:VERSION=$VERSION
          echo "VERSION=$env:VERSION" >> $GITHUB_ENV  # 将版本号写入 GITHUB_ENV

      - name: Build Windows executable
        run: |
          pyinstaller --onefile --name main-win-${{ matrix.architecture }} main.py
        env:
          VERSION: ${{ env.VERSION }}

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-${{ matrix.architecture }}
          path: dist/

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        architecture: [amd64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Get version from Git
        id: get_version
        run: |
          VERSION=$(git describe --tags --always)
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # 将版本号写入 GITHUB_ENV

      - name: Build macOS executable
        run: |
          pyinstaller --onefile --name main-macos-${{ matrix.architecture }} main.py
        env:
          VERSION: ${{ env.VERSION }}

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-${{ matrix.architecture }}
          path: dist/

  release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read Release Notes
        id: read_release_notes
        run: |
          # 读取 RELEASESBODY.md 文件的内容，替换换行符为空格，并转义特殊字符
          RELEASE_NOTES=$(cat RELEASESBODY.md | tr '\n' ' ' | sed 's/"/\\"/g' | sed 's/\//\\\//g' | sed 's/-/\\-/g')
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV
          
      
      - name: Get version from Git
        id: get_version
        run: |
          VERSION=$(git describe --tags --always)
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # 将版本号写入 GITHUB_ENV

      - name: Download Linux amd64 artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-amd64
          path: ./artifacts/linux-amd64/

      - name: Download Linux arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-arm64
          path: ./artifacts/linux-arm64/

      - name: Download Windows amd64 artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-amd64
          path: ./artifacts/windows-amd64/

      - name: Download Windows arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-arm64
          path: ./artifacts/windows-arm64/

      - name: Download macOS amd64 artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-amd64
          path: ./artifacts/macos-amd64/

      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-arm64
          path: ./artifacts/macos-arm64/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body_path: RELEASESBODY.md
          files: |
            ./artifacts/linux-amd64/*
            ./artifacts/windows-amd64/*
            ./artifacts/macos-amd64/*
            ./artifacts/linux-arm64/*
            ./artifacts/windows-arm64/*
            ./artifacts/macos-arm64/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
